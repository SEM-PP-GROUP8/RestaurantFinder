package com.group8.view;

import com.group8.controller.ControllerListener;
import com.group8.model.Model;
import com.group8.model.Restaurant;
import com.group8.model.Session;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

public class EditRestaurant extends javax.swing.JFrame {
    private ControllerListener controllerListener;
    List <Restaurant> restaurants;
    boolean initializeCombo = false;
    
    public EditRestaurant() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        areaLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        opentimeLabel = new javax.swing.JLabel();
        closetimeLabel = new javax.swing.JLabel();
        minpriceLabel = new javax.swing.JLabel();
        maxpriceLabel = new javax.swing.JLabel();
        ownerLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        minPriceText = new javax.swing.JTextField();
        ownerText = new javax.swing.JTextField();
        maxPriceText = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        cbModel = new DefaultComboBoxModel();
        restaurantOrAddCombo = new javax.swing.JComboBox();
        areaModel = new DefaultComboBoxModel ();
        areaCombo = new javax.swing.JComboBox();
        typeModel = new DefaultComboBoxModel ();
        typeCombo = new javax.swing.JComboBox();
        openModel = new DefaultComboBoxModel ();
        openCombo = new javax.swing.JComboBox();
        closeModel = new DefaultComboBoxModel ();
        closeCombo = new javax.swing.JComboBox();
        logoLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Add / Edit Restaurants");
        setLocation(new java.awt.Point(200, 50));
        setMaximumSize(new java.awt.Dimension(800, 620));
        setMinimumSize(new java.awt.Dimension(800, 620));
        setPreferredSize(new java.awt.Dimension(800, 620));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nameLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("Name");
        getContentPane().add(nameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 180, 40));

        areaLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        areaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        areaLabel.setText("Area");
        getContentPane().add(areaLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, 180, 40));

        typeLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        typeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        typeLabel.setText("Type");
        getContentPane().add(typeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 180, 40));

        opentimeLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        opentimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        opentimeLabel.setText("Opens");
        getContentPane().add(opentimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 220, 180, 40));

        closetimeLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        closetimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        closetimeLabel.setText("Closes");
        getContentPane().add(closetimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 220, 180, 40));

        minpriceLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        minpriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minpriceLabel.setText("Min Price");
        getContentPane().add(minpriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, 180, 40));

        maxpriceLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        maxpriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        maxpriceLabel.setText("Max Price");
        getContentPane().add(maxpriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 320, 180, 40));

        ownerLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        ownerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ownerLabel.setText("Owner");
        getContentPane().add(ownerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 120, 180, 40));

        nameText.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        nameText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nameText.setToolTipText("");
        getContentPane().add(nameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 180, 40));

        minPriceText.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        minPriceText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        minPriceText.setToolTipText("");
        getContentPane().add(minPriceText, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 180, 40));

        ownerText.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        ownerText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(ownerText, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 160, 180, 40));

        maxPriceText.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        maxPriceText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(maxPriceText, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 360, 180, 40));

        backButton.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, 240, 80));

        deleteButton.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 240, 80));

        updateButton.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 420, 240, 80));

        addButton.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 510, 240, 80));

        restaurantOrAddCombo.setModel(cbModel);
        restaurantOrAddCombo.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        restaurantOrAddCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                restaurantOrAddComboItemStateChanged(evt);
            }
        });
        getContentPane().add(restaurantOrAddCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, 240, 80));

        areaCombo.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        areaCombo.setModel(areaModel);
        getContentPane().add(areaCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 60, 180, 40));

        typeCombo.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        typeCombo.setModel(typeModel);
        getContentPane().add(typeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, 180, 40));

        openCombo.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        openCombo.setModel(openModel);
        getContentPane().add(openCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 180, 40));

        closeCombo.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        closeCombo.setModel(closeModel);
        getContentPane().add(closeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 260, 180, 40));

        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/group8/view/images/logo.jpg"))); // NOI18N
        getContentPane().add(logoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 510, 100, -1));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/group8/view/images/retina_wood_@2X.png"))); // NOI18N
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        controllerListener.exitEditRestaurantsView();
    }//GEN-LAST:event_formWindowClosing

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        controllerListener.exitEditRestaurantsView();
    }//GEN-LAST:event_backButtonActionPerformed

    private void restaurantOrAddComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_restaurantOrAddComboItemStateChanged
        //If the Owner or Admin decide to choose a specific restaurant to edit or delete.
        //Also if they decide to go back to the add restaurant option.
        if (evt.getStateChange()==1)
        {
            if (!initializeCombo)
            {
                manageButtons();
                showSelectedRestaurant ();
            }
        }
    }//GEN-LAST:event_restaurantOrAddComboItemStateChanged

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        //Add a restaurant is clicked. It will:
        /*  - Retrieve the info from the txtfields and dropdowns
        *   - Evaluate the info (make sure that the important things are not unchosen or null)
        *   - Evaluate if maybe the restaurant already exists based on the important info.
        *   - Add the restaurant to the DB
        *   - Update the restaurant list for the view.
        *   - Repopulate the chooserCombo
        *   - Show the default view
        *   - Send msg to user that the restaurant was succesfully added.
        */
        Restaurant rest = getFields();
        if(evaluateFields (rest))
        {
            if (!controllerListener.restExists(rest))
            {
                controllerListener.addNewRestaurant (rest);
                fetchRestaurantList();
                populateRestChooserCombo();
                setFieldsDefault();
                sendSuccesfulMSG ("Your Restaurant was succesfully added.", "Success!");
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        //Delete a restaurant is clicked. It will:
        /*  - Asks the user if he is sure.
        *   - Delete the restaurant from the DB
        *   - Update the restaurant list for the view.
        *   - Repopulate the chooserCombo
        *   - Show the default view
        *   - Send msg to user that the restaurant was succesfully deleted.
        */
        int answer = sendQuestionMSG ("Are you sure you want to delete this restaurant?", "Delete?");
        if (answer == 0)
        {
            int restIndex = restaurantOrAddCombo.getSelectedIndex()-1;
            controllerListener.deleteRestaurant (restaurants.get(restIndex).getId());
            fetchRestaurantList();
            populateRestChooserCombo();
            setFieldsDefault();
            sendSuccesfulMSG ("Your Restaurant was succesfully deleted.", "Success!");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        //Update a restaurant is clicked. It will:
        /*  - Retrieve the info from the txtfields and dropdowns
        *   - Evaluate the info (make sure that the important things are not unchosen or null)
        *   - Update the restaurant in the DB
        *   - Update the restaurant list for the view.
        *   - Repopulate the chooserCombo
        *   - Show the default view
        *   - Send msg to user that the restaurant was succesfully updated.
        */
        Restaurant rest = getFields ();
        if (evaluateFields(rest))
        {
            int answer = sendQuestionMSG ("Are you sure you want to save this changes?", "Update?");
            if (answer == 0)
            {
                controllerListener.updateRest(rest);
                fetchRestaurantList();
                populateRestChooserCombo();
                setFieldsDefault();
                sendSuccesfulMSG ("Your Restaurant was succesfully updated.", "Success!");
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox areaCombo;
    DefaultComboBoxModel areaModel;
    private javax.swing.JLabel areaLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JComboBox closeCombo;
    private DefaultComboBoxModel closeModel;
    private javax.swing.JLabel closetimeLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JTextField maxPriceText;
    private javax.swing.JLabel maxpriceLabel;
    private javax.swing.JTextField minPriceText;
    private javax.swing.JLabel minpriceLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JComboBox openCombo;
    private DefaultComboBoxModel openModel;
    private javax.swing.JLabel opentimeLabel;
    private javax.swing.JLabel ownerLabel;
    private javax.swing.JTextField ownerText;
    private javax.swing.JComboBox restaurantOrAddCombo;
    private DefaultComboBoxModel cbModel;
    private javax.swing.JComboBox typeCombo;
    private DefaultComboBoxModel typeModel;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    public void loadView ()
    {//Loads the main view for the restaurand edit option
        //if owner then makes the ownerID fixed.
        ownerText.setEditable(true);
        if ("Owners".equals(Session.getType()))
        {
            String ownerID = Integer.toString(Session.getId());
            ownerText.setText(ownerID);
            ownerText.setEditable(false);
        } 
        fetchRestaurantList ();
        manageButtons();
        populateRegularCombos();
        populateRestChooserCombo ();
        setFieldsDefault ();
    }
    
    private void fetchRestaurantList() 
    {//Updates the variable restaurants with the appropriate list depending on the session type.
        switch (Session.getType()) 
        {
            case "Owners":
                restaurants = controllerListener.fetchRestaurantsByLogin(Session.getId());
                break;
            case "Admins":
                restaurants = controllerListener.fetchAllRestaurants();
                break;
            default:
                System.out.println ("Error - Unexpected user in the edit Restaurant View!");
                System.exit(0);
        }
    }
    
    private void manageButtons ()
    {//Depending if the user wants to add or wants to delete/update a record it manages the buttons.
        if (restaurantOrAddCombo.getSelectedIndex() <= 0)
            {
                updateButton.setVisible(false);
                deleteButton.setVisible(false);
                addButton.setVisible(true);              
            }
        else
            {
                updateButton.setVisible(true);
                deleteButton.setVisible(true);
                addButton.setVisible(false);
            }
    }
    
    private Restaurant getFields()
    {//Retrieves the fields a creates a Restaurant. Also checks that the price and owner are integers.
        Restaurant rest;
        try
        {
            String name = nameText.getText();
            String street = "TestGatan 3";
            String area = areaCombo.getSelectedItem().toString();
            int zipcode = 00001;
            String city = "Göteborg";
            String type = typeCombo.getSelectedItem().toString();
            int minPrice = Integer.parseInt(minPriceText.getText());
            int maxPrice = Integer.parseInt(maxPriceText.getText());
            int owner = Integer.parseInt(ownerText.getText());
            
            int currentSelectedIndex = restaurantOrAddCombo.getSelectedIndex();
            int ownerID = 0;
            if (currentSelectedIndex > 0)
            {
                ownerID = restaurants.get(currentSelectedIndex-1).getId();
            }
            rest = new Restaurant (ownerID, name, street,area, zipcode,city,type,minPrice,maxPrice,owner);
            return rest;
        }
        catch (Exception e)
        {
            sendErrorMSG ("Price and Owner must be Integers!", "User Error");
            rest = null;
            return rest;
        }
    }
    
    private void showSelectedRestaurant()
    {//If the user chooses a an option from the drop down this helps see if its default (add new) or a 
        //specific restaurant.
        int currentIndex = restaurantOrAddCombo.getSelectedIndex() - 1;
        if (currentIndex < 0)
            setFieldsDefault();
        else
            setFieldsRest (restaurants.get(currentIndex));
    }
    
    private void setFieldsDefault ()
    {//Default view for the fields and dropdowns.
        String defaultText = "";
        nameText.setText(defaultText);
        areaCombo.setSelectedIndex(0);
        typeCombo.setSelectedIndex(0);
        openCombo.setSelectedIndex(0);
        closeCombo.setSelectedIndex(0);
        minPriceText.setText(defaultText);
        maxPriceText.setText(defaultText);
        if (!"Owners".equals(Session.getType()))
           ownerText.setText(defaultText);
        restaurantOrAddCombo.setSelectedIndex(0);
    }
    
    private void setFieldsRest(Restaurant rest) 
    {//Sets the fields and dropdowns to a specific restaurant.
        nameText.setText(rest.getName());
        areaCombo.setSelectedIndex(controllerListener.getIndexArray (rest.getArea(), "Area"));
        typeCombo.setSelectedIndex(controllerListener.getIndexArray (rest.getType(), "Type"));
        ownerText.setText(Integer.toString(rest.getOwner()));
        openCombo.setSelectedIndex(0);
        closeCombo.setSelectedIndex(0);
        minPriceText.setText(Integer.toString(rest.getMinPrice()));
        maxPriceText.setText(Integer.toString(rest.getMaxPrice()));
    }
    
    private boolean evaluateFields(Restaurant rest)
    {//Makes sure that the fields which are important are not empty (textfields) or unchosen (drop downs)
        //If thats the case then sends the appropriate msg to the user. Also checks that the minPrice 
        // cannot be greater than the maxPrice.
        if ("".equals(rest.getName()))
        {
            sendErrorMSG ("Field Name cannot be empty.", "User Error");
            return false;
        }
        else if ("Area:".equals(rest.getArea()))
        {
            sendErrorMSG ("An Area must be chosen.", "User Error");
            return false;
        }
        else if ("Type:".equals(rest.getType()))
        {
            sendErrorMSG ("A type of food must be chosen.", "User Error");
            return false;
        }
        else if (rest.getMinPrice()>rest.getMaxPrice())
        {
            sendErrorMSG ("Minimum price cannot be higher than the maximum price.", "User Error");
            return false;
        }
        else
            return true;
    }
    
    private void populateRegularCombos ()
    {//Populates the combo boxes with the static data (defined options).  
        //Populates the Area DropDown
        int areaPossibilities = Model.locationArray.length;
        areaCombo.removeAllItems();
        areaModel.addElement("Area:");
        for (int x=1; x<areaPossibilities;x++)
        {
            areaModel.addElement(Model.locationArray[x]);
        }
        
        //Populates the Type of Food DropDown
        int typeFoodPossibilities = Model.typeFoodArray.length;
        typeCombo.removeAllItems();
        typeModel.addElement("Type:");
        for (int x=1; x<typeFoodPossibilities;x++)
        {
            typeModel.addElement(Model.typeFoodArray[x]);
        }
        
        //Populates the OpenTime and CloseTime DropDown
        int openTimePossibilities = Model.timeArray.length;
        openCombo.removeAllItems();
        openModel.addElement("Opens at:");
        closeModel.addElement("Closes at:");
        for (int x=1; x<openTimePossibilities;x++)
        {
            openModel.addElement(Model.timeArray[x]);
            closeModel.addElement(Model.timeArray[x]);
        }
    }
    
    private void populateRestChooserCombo() 
    {//Populates the add/Choose rest option combo
        initializeCombo = true;
        cbModel.removeAllElements();
        cbModel.addElement("Add New");
        for (Restaurant current : restaurants) 
        {
            String restaurant = current.getName();
            restaurant = restaurant + " - " + current.getArea();
            cbModel.addElement(restaurant);
        }
        initializeCombo = false;
    }
    
    private void sendErrorMSG (String msg, String title)
    {//Sends an error msg with a specific msg and a specific title
        JOptionPane.showMessageDialog(null, msg, title, JOptionPane.ERROR_MESSAGE);
    }
    
    private int  sendQuestionMSG (String msg, String title)
    {//Sends a questions msg with a specific msg and a specific title
        Object[] options = { "Yes", "No" };
        int answer = JOptionPane.showOptionDialog(null, msg, title,
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
        return answer;
    }
    
    private void sendSuccesfulMSG (String msg, String title)
    {//Sends a success msg with a specific msg and a specific title.
        JOptionPane.showMessageDialog(null, msg, title, JOptionPane.INFORMATION_MESSAGE);
    }

    public void setControllerListener(ControllerListener controllerListener) 
    {//Sets the controllerListener.
        this.controllerListener = controllerListener;
    }
}
